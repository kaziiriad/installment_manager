# render.yaml
databases:
  - name: postgres
    databaseName: ${POSTGRES_DB}
    user: ${POSTGRES_USER}
    plan: free
    type: postgresql

  - name: redis
    type: redis
    plan: free

services:
  # FastAPI Backend
  - type: web
    name: web
    env: docker
    build:
      dockerfilePath: ./backend/Dockerfile
      context: .
    envVars:
      - key: DATABASE_URL
        fromDatabase:
          name: postgres
          property: connectionString
      - key: REDIS_URL_CACHE
        fromService:
          type: redis
          name: redis
          property: connectionString
          transform: "${value}/0"
      - key: REDIS_URL_QUEUE
        fromService:
          type: redis
          name: redis
          property: connectionString
          transform: "${value}/1"
      - key: SENDGRID_API_KEY
        sync: false
      - key: JWT_SECRET_KEY
        sync: false
      - group: env-group

  # Frontend Service
  - type: web
    name: frontend
    env: docker
    build:
      dockerfilePath: ./frontend/Dockerfile
      context: .
    envVars:
      - key: VITE_API_URL
        value: https://web.onrender.com  # Update with your web service URL

  # Celery Worker
  - type: worker
    name: worker
    env: docker
    build:
      dockerfilePath: ./backend/Dockerfile
      context: .
    command: python -m celery -A app.core.celery_app worker --pool=solo -l INFO -Q notifications
    envVars:
      - group: env-group

  # Celery Beat
  - type: worker
    name: beat
    env: docker
    build:
      dockerfilePath: ./backend/Dockerfile
      context: .
    command: python -m celery -A app.core.celery_app beat -l INFO
    envVars:
      - group: env-group

envGroups:
  - name: env-group
    environmentVariables:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      JWT_ALGORITHM: ${JWT_ALGORITHM}
      JWT_EXPIRATION_TIME: ${JWT_EXPIRATION_TIME}
      EMAIL_SENDER: ${EMAIL_SENDER}